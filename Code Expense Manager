#handy
from kivy.app import App
from kivy.lang import Builder
from kivy.uix.screenmanager import ScreenManager, Screen
from kivy.uix.label import Label
from kivy.uix.image import Image
from kivy.graphics import Color, Rectangle
from datetime import datetime
from collections import defaultdict
import matplotlib.pyplot as plt
import os
from kivy.uix.button import Button
from kivy.uix.popup import Popup
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.textinput import TextInput
import json 
from kivy.uix.scrollview import ScrollView 
from kivy.uix.gridlayout import GridLayout 

# Define the screens
class MainScreen(Screen):
    pass

class ViewScreen(Screen):
    pass

class GraphScreen(Screen):
    pass

class MonthlySummaryScreen(Screen):
    pass

# Kivy Language string
kv = '''
ScreenManager:
    MainScreen:
    ViewScreen:
    GraphScreen:
    MonthlySummaryScreen:

<MainScreen>:
    name: 'main'
    BoxLayout:
        orientation: 'vertical'
        padding: 20
        spacing: 20
        canvas.before:
            Color:
                rgba: 1, 1, 0, 1  # Yellow background
            Rectangle:
                pos: self.pos
                size: self.size
        Label:
            text: "Expense Manager"
            font_size: '27sp'
            bold: True
            color: 0.5, 0, 0, 1  # Dark red text
        TextInput:
            id: expense_input
            hint_text: "Enter Expense name"
            font_size: '28sp'
            multiline: False
            size_hint_y: None
            height: self.minimum_height
        Label:
            text: "Add Amount"
            font_size: '30sp'
            bold: True
            color: 0.5, 0, 0, 1  # Dark red text
        TextInput:
            id: amount_input
            hint_text: "Enter Amount"
            font_size: '28sp'
            multiline: False
            input_filter: 'float'
            size_hint_y: None
            height: self.minimum_height
        Button:
            text: "Add Entry"
            font_size: '28sp'
            size_hint_y: None
            height: '60dp'
            background_color: 0.5, 0, 0, 1  # Dark red button
            on_press: app.add_entry()
        Button:
            text: "View Expense"
            font_size: '28sp'
            size_hint_y: None
            height: '60dp'
            background_color: 0.5, 0, 0, 1
            on_press:
                app.update_view_screen()
                root.manager.current = 'view'
        Button:
            text: "Show Graph"
            font_size: '28sp'
            size_hint_y: None
            height: '60dp'
            background_color: 0.5, 0, 0, 1
            on_press:
                app.generate_graph()
                root.manager.current = 'graph'
        Button:
            text: "Monthly Summary"
            font_size: '28sp'
            size_hint_y: None
            height: '60dp'
            background_color: 0.5, 0, 0, 1
            on_press:
                app.update_monthly_summary()
                root.manager.current = 'monthly_summary'
        BoxLayout: # Use a BoxLayout for horizontal arrangement of Save/Load
            size_hint_y: None
            height: '60dp'
            spacing: 10
            Button:
                text: "Save Data"
                font_size: '24sp'
                background_color: 0.1, 0.5, 0.1, 1 # Greenish save button
                on_press: app.save_expenses_explicit() # Call an explicit save method
            Button:
                text: "Load Data"
                font_size: '24sp'
                background_color: 0.1, 0.1, 0.8, 1 # Bluish load button
                on_press: app.load_expenses_explicit() # Call an explicit load method
        Label:
            id: total_label
            text: "Total: ₹0.00"
            font_size: '40sp'
            color: 0.5, 0, 0, 1
            bold: True
        Label: # Label for status messages on MainScreen
            id: status_label
            text: ""
            font_size: '18sp'
            color: 0, 0, 0, 1 # Black text
            size_hint_y: None
            height: '30dp'

<ViewScreen>:
    name: 'view'
    BoxLayout:
        orientation: 'vertical'
        canvas.before:
            Color:
                rgba: 1, 1, 0, 1
            Rectangle:
                pos: self.pos
                size: self.size
        ScrollView:
            do_scroll_x: True 
            GridLayout:
                id: view_list
                cols: 5 
                size_hint_y: None
                height: self.minimum_height
                row_default_height: '25dp' 
                row_force_default: True
                spacing: 0 
                padding: [0, 0, 0, 0] 
        Label:
            id: view_total
            text: "Total: ₹0.00"
            font_size: '18sp'
            color: 0.5, 0, 0, 1
            size_hint_y: None
            height: '40dp'
        BoxLayout:
            size_hint_y: None
            height: '60dp'
            Button:
                text: "Reset All"
                background_color: 0.5, 0, 0, 1
                on_press: app.reset_all()
            Button:
                text: "Back to Main"
                background_color: 0.5, 0, 0, 1
                on_press: root.manager.current = 'main'

<GraphScreen>:
    name: 'graph'
    BoxLayout:
        orientation: 'vertical'
        canvas.before:
            Color:
                rgba: 1, 1, 0, 1
            Rectangle:
                pos: self.pos
                size: self.size
        Label:
            text: "Expense Graph"
            font_size: '26sp'
            color: 0.5, 0, 0, 1
        Image:
            id: graph_img
            allow_stretch: True
            keep_ratio: True
            size_hint_y: 0.9
        Button:
            text: "Back to Main"
            background_color: 0.5, 0, 0, 1
            on_press: root.manager.current = 'main'

<MonthlySummaryScreen>:
    name: 'monthly_summary'
    BoxLayout:
        orientation: 'vertical'
        padding: 20
        spacing: 10
        canvas.before:
            Color:
                rgba: 1, 1, 0, 1
            Rectangle:
                pos: self.pos
                size: self.size
        Label:
            text: "Monthly Expense Summary"
            font_size: '20sp'
            bold: True
            color: 0.5, 0, 0, 1
            size_hint_y: None
            height: '50dp'
        ScrollView:
            GridLayout:
                id: monthly_summary_list
                cols: 2
                size_hint_y: None
                height: self.minimum_height
                row_default_height: '40dp'
                row_force_default: True
        Button:
            text: "Back to Main"
            font_size: '28sp'
            size_hint_y: None
            height: '60dp'
            background_color: 0.5, 0, 0, 1
            on_press: root.manager.current = 'main'
'''

# Main App class
class ExpenseManagerApp(App):
    def build(self):
        self.expenses = [] # List of tuples: (expense_name, amount, timestamp)
        self.total_expense = 0.0
        self.monthly_expenses = defaultdict(float) # To store monthly totals
        self.data_file = os.path.join(self.user_data_dir, 'expenses.json')
        
        # We still load automatically on build for convenience,
        # but the user can also explicitly load later.
        self.load_expenses_automatic() 
        return Builder.load_string(kv)

    def on_stop(self):
        """Called when the Kivy app is stopped. Save data here (automatic save)."""
        self.save_expenses() # Call the generic save method

    def save_expenses(self):
        """Saves the current expenses list to a JSON file (used by on_stop)."""
        serializable_expenses = []
        for name, amount, timestamp in self.expenses:
            serializable_expenses.append((name, amount, timestamp.isoformat()))
        
        try:
            with open(self.data_file, 'w') as f:
                json.dump(serializable_expenses, f)
            print(f"Expenses saved to {self.data_file}")
            # Do not show status message here as it's an automatic save
        except Exception as e:
            print(f"Error saving expenses: {e}")
            # Do not show status message here as it's an automatic save

    def save_expenses_explicit(self):
        """Saves expenses when the 'Save Data' button is pressed."""
        self.save_expenses() # Call the generic save method
        self._show_status_message("Expenses explicitly saved.", False)


    def load_expenses_automatic(self):
        """Loads expenses from a JSON file (used by build for automatic load)."""
        if os.path.exists(self.data_file):
            try:
                with open(self.data_file, 'r') as f:
                    loaded_data = json.load(f)
                
                self.expenses = []
                for name, amount, timestamp_str in loaded_data:
                    if isinstance(timestamp_str, str):
                        self.expenses.append((name, amount, datetime.fromisoformat(timestamp_str)))
                    else:
                        print(f"Warning: Non-string timestamp encountered: {timestamp_str}. Assigning current datetime.")
                        self.expenses.append((name, amount, datetime.now())) 
                
                self._update_total_and_monthly()
                print(f"Expenses loaded automatically from {self.data_file}")
            except json.JSONDecodeError as e:
                print(f"Error decoding JSON from {self.data_file}: {e}. File might be corrupted. Starting fresh.")
                self.expenses = [] 
            except Exception as e:
                print(f"Error loading expenses: {e}. Starting fresh.")
                self.expenses = []
        else:
            print("No saved expense data found for automatic load.")

    def load_expenses_explicit(self):
        """Loads expenses when the 'Load Data' button is pressed."""
        # This will reload all expenses and update the UI
        initial_expense_count = len(self.expenses)
        self.load_expenses_automatic() # Use the same loading logic
        if len(self.expenses) > initial_expense_count:
            self._show_status_message("Expenses loaded successfully.", False)
        elif len(self.expenses) < initial_expense_count:
            self._show_status_message("Expenses loaded, some might have been removed.", False)
        else:
             self._show_status_message("No new expenses loaded or file empty.", False)
        print(f"Explicit load: Current expenses count: {len(self.expenses)}")


    def _show_status_message(self, message, is_error=False):
        """Helper to show temporary status messages on MainScreen."""
        status_label = self.root.get_screen('main').ids.status_label
        status_label.text = message
        status_label.color = (1, 0, 0, 1) if is_error else (0.5, 0, 0, 1) # Red for error, dark red for success

    def _clear_input_fields(self):
        """Helper to clear input fields on MainScreen."""
        self.root.get_screen('main').ids.expense_input.text = ""
        self.root.get_screen('main').ids.amount_input.text = ""
        
    def _update_total_and_monthly(self):
        """
        Helper function to recalculate total and monthly expenses
        after any addition, edit, or deletion.
        """
        self.total_expense = 0.0
        self.monthly_expenses = defaultdict(float)
        for expense_name, amount, timestamp in self.expenses:
            self.total_expense += amount
            month_year = timestamp.strftime('%Y-%m')
            self.monthly_expenses[month_year] += amount
        self.root.get_screen('main').ids.total_label.text = f"Total: ₹{self.total_expense:.2f}"
        
    def add_entry(self):
        expense_name = self.root.get_screen('main').ids.expense_input.text.strip()
        amount_text = self.root.get_screen('main').ids.amount_input.text.strip()

        if expense_name and amount_text:
            try:
                amount = float(amount_text)
                if amount <= 0:
                    self._show_status_message("Amount must be positive.", True)
                    return

                # --- START OF CHANGE: Capitalize first letter ---
                expense_name = expense_name.title() # Capitalizes the first letter of each word
                # If you only want the very first letter of the whole string capitalized, use:
                # expense_name = expense_name.capitalize()
                # --- END OF CHANGE ---

                timestamp = datetime.now()
                self.expenses.append((expense_name, amount, timestamp))
                self._update_total_and_monthly() # Recalculate totals
                self.save_expenses() # Save after adding an entry (automatic save)
                
                self._clear_input_fields()
                self._show_status_message(f"Added: '{expense_name}' - ₹{amount:.2f}")
                print(f"Added: {expense_name}, {amount:.2f}, {timestamp}")
            except ValueError:
                self._show_status_message("Invalid amount. Enter a number.", True)
                print("Invalid amount entered. Please enter a number.")
        else:
            self._show_status_message("Please enter both expense name and amount.", True)
            print("Please enter both expense name and amount.")

    def update_view_screen(self):
        view_list = self.root.get_screen('view').ids.view_list
        view_list.clear_widgets()

        item_font_size = '9sp' 
        button_font_size = '8sp' 

        col_expense_hint_x = 0.35 
        col_amount_hint_x = 0.25 
        col_date_hint_x = 0.20    
        button_width_val = '45dp' 

        view_list.add_widget(Label(text="Expense", bold=True, color=(0.5, 0, 0, 1), 
                                   size_hint_x=col_expense_hint_x, font_size=item_font_size))
        view_list.add_widget(Label(text="Amount", bold=True, color=(0.5, 0, 0, 1), 
                                   size_hint_x=col_amount_hint_x, font_size=item_font_size))
        view_list.add_widget(Label(text="Date", bold=True, color=(0.5, 0, 0, 1), 
                                   size_hint_x=col_date_hint_x, font_size=item_font_size))
        view_list.add_widget(Label(text="Edit", bold=True, color=(0.5, 0, 0, 1), 
                                   size_hint_x=None, width=button_width_val, font_size=item_font_size))
        view_list.add_widget(Label(text="Del", bold=True, color=(0.5, 0, 0, 1), 
                                   size_hint_x=None, width=button_width_val, font_size=item_font_size))


        for i, (expense, amount, timestamp) in enumerate(self.expenses):
            view_list.add_widget(Label(text=expense, color=(0, 0, 0, 1), 
                                       size_hint_x=col_expense_hint_x, font_size=item_font_size))
            view_list.add_widget(Label(text=f"₹{amount:.2f}", color=(0, 0, 0, 1), 
                                       size_hint_x=col_amount_hint_x, font_size=item_font_size))
            view_list.add_widget(Label(text=timestamp.strftime('%Y-%m-%d'), color=(0, 0, 0, 1), 
                                       size_hint_x=col_date_hint_x, font_size=item_font_size))
            
            edit_btn = Button(text="Edit", size_hint_x=None, width=button_width_val, 
                              background_color=(0.1, 0.5, 0.1, 1), font_size=button_font_size) 
            edit_btn.bind(on_press=lambda instance, index=i: self.show_edit_popup(index))
            view_list.add_widget(edit_btn)

            delete_btn = Button(text="Del", size_hint_x=None, width=button_width_val, 
                                background_color=(0.8, 0.1, 0.1, 1), font_size=button_font_size) 
            delete_btn.bind(on_press=lambda instance, index=i: self.delete_expense_from_list(index))
            view_list.add_widget(delete_btn)

        self.root.get_screen('view').ids.view_total.text = f"Total: ₹{self.total_expense:.2f}"

    def show_edit_popup(self, index):
        """Shows a popup to edit the selected expense."""
        if 0 <= index < len(self.expenses):
            expense_to_edit = self.expenses[index]
            
            content = BoxLayout(orientation='vertical', spacing=10, padding=10)
            
            content.add_widget(Label(text=f"Editing: {expense_to_edit[0]}", size_hint_y=None, height='40dp', color=(0.5,0,0,1)))
            
            name_input = TextInput(hint_text="New Expense Name", text=expense_to_edit[0], multiline=False, size_hint_y=None, height='40dp')
            content.add_widget(name_input)

            amount_input = TextInput(hint_text="New Amount", text=str(expense_to_edit[1]), input_filter='float', multiline=False, size_hint_y=None, height='40dp')
            content.add_widget(amount_input)
            
            buttons_layout = BoxLayout(size_hint_y=None, height='40dp', spacing=10)
            save_button = Button(text="Save", background_color=(0.1, 0.5, 0.1, 1))
            cancel_button = Button(text="Cancel", background_color=(0.8, 0.1, 0.1, 1))
            
            buttons_layout.add_widget(save_button)
            buttons_layout.add_widget(cancel_button)
            content.add_widget(buttons_layout)

            popup = Popup(title='Edit Expense', content=content, size_hint=(0.9, 0.5))
            
            save_button.bind(on_press=lambda btn: self.perform_edit(index, name_input.text.strip(), amount_input.text.strip(), popup))
            cancel_button.bind(on_press=popup.dismiss)
            
            popup.open()

    def perform_edit(self, index, new_name, new_amount_str, popup_instance):
        """Performs the actual edit of the expense."""
        if not new_name or not new_amount_str:
            self._show_status_message("Both new name and amount are required.", True)
            print("Error: Name or amount missing during edit.")
            return

        try:
            new_amount = float(new_amount_str)
            if new_amount <= 0:
                self._show_status_message("Amount must be positive.", True)
                return

            # --- START OF CHANGE: Capitalize first letter when editing ---
            new_name = new_name.title() 
            # --- END OF CHANGE ---

            self.expenses[index] = (new_name, new_amount, datetime.now()) 
            self._update_total_and_monthly()
            self.save_expenses() 
            self.update_view_screen() 
            self._show_status_message(f"Expense '{new_name}' updated successfully.", False)
            print(f"Expense at index {index} updated to {new_name}, {new_amount}")
            popup_instance.dismiss() 
        except ValueError:
            self._show_status_message("Invalid amount entered. Please enter a number.", True)
            print("Error: Invalid amount during edit.")


    def delete_expense_from_list(self, index):
        """Deletes an expense from the list based on its index."""
        def confirm_delete(instance):
            if 0 <= index < len(self.expenses):
                deleted_expense_name = self.expenses[index][0]
                del self.expenses[index] 
                self._update_total_and_monthly() 
                self.save_expenses() 
                self.update_view_screen() 
                self._show_status_message(f"Expense '{deleted_expense_name}' deleted.", False)
                print(f"Deleted expense at index {index}: {deleted_expense_name}")
            else:
                self._show_status_message("Error: Expense not found for deletion.", True)
                print(f"Error: Invalid index {index} for deletion.")
            confirm_popup.dismiss() 

        content = BoxLayout(orientation='vertical', spacing=10, padding=10)
        content.add_widget(Label(text="Are you sure you want to delete this expense?", size_hint_y=None, height='40dp'))
        
        buttons_layout = BoxLayout(size_hint_y=None, height='40dp', spacing=10)
        yes_button = Button(text="Yes", background_color=(0.8, 0.1, 0.1, 1))
        no_button = Button(text="No", background_color=(0.1, 0.5, 0.1, 1))
        
        buttons_layout.add_widget(yes_button)
        buttons_layout.add_widget(no_button)
        content.add_widget(buttons_layout) # Corrected this line from previous version

        confirm_popup = Popup(title='Confirm Deletion', content=content, size_hint=(0.8, 0.3))
        yes_button.bind(on_press=confirm_delete)
        no_button.bind(on_press=confirm_popup.dismiss)
        
        confirm_popup.open()


    def reset_all(self):
        def confirm_reset(instance):
            self.expenses = []
            self._update_total_and_monthly() 
            self.save_expenses() 
            self.update_view_screen() 
            self._show_status_message("All expenses reset.", False)
            print("All expenses reset.")
            reset_popup.dismiss()

        content = BoxLayout(orientation='vertical', spacing=10, padding=10)
        content.add_widget(Label(text="Are you sure you want to delete all expenses?", size_hint_y=None, height='40dp'))
        
        buttons_layout = BoxLayout(size_hint_y=None, height='40dp', spacing=10)
        yes_button = Button(text="Yes", background_color=(0.8, 0.1, 0.1, 1))
        no_button = Button(text="No", background_color=(0.1, 0.5, 0.1, 1))
        
        buttons_layout.add_widget(yes_button)
        buttons_layout.add_widget(no_button)
        content.add_widget(buttons_layout) # Corrected this line from previous version
        
        reset_popup = Popup(title='Confirm Reset', content=content, size_hint=(0.8, 0.3))
        yes_button.bind(on_press=confirm_reset)
        no_button.bind(on_press=reset_popup.dismiss)
        
        reset_popup.open()

    def generate_graph(self):
        self.root.get_screen('graph').ids.graph_img.source = '' 

        if not self.expenses:
            print("No expenses to generate graph.")
            self._show_status_message("No expenses recorded to generate a graph.", True)
            return

        aggregated_expenses = defaultdict(float)
        for name, amount, _ in self.expenses:
            aggregated_expenses[name] += amount

        labels = list(aggregated_expenses.keys())
        sizes = list(aggregated_expenses.values())

        if len(sizes) == 0 or sum(sizes) == 0:
            print("Not enough data to generate a meaningful pie chart.")
            self._show_status_message("Not enough data to generate a meaningful graph.", True)
            return
            
        fig1, ax1 = plt.subplots()
        ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)
        ax1.axis('equal')  

        graph_dir = self.user_data_dir
        os.makedirs(graph_dir, exist_ok=True)
        graph_path = os.path.join(graph_dir, 'expense_graph.png')
        
        plt.savefig(graph_path)
        plt.close(fig1) 

        self.root.get_screen('graph').ids.graph_img.source = graph_path
        self.root.get_screen('graph').ids.graph_img.reload() 

    def update_monthly_summary(self):
        monthly_summary_list = self.root.get_screen('monthly_summary').ids.monthly_summary_list
        monthly_summary_list.clear_widgets()

        monthly_summary_list.add_widget(Label(text="Month", bold=True, color=(0.5, 0, 0, 1)))
        monthly_summary_list.add_widget(Label(text="Total Expense", bold=True, color=(0.5, 0, 0, 1)))

        sorted_months = sorted(self.monthly_expenses.keys())

        if not sorted_months:
            monthly_summary_list.add_widget(Label(text="No monthly data", colspan=2, color=(0.5, 0, 0, 1)))

        for month_year in sorted_months:
            total_amount = self.monthly_expenses[month_year]
            monthly_summary_list.add_widget(Label(text=month_year, color=(0, 0, 0, 1)))
            monthly_summary_list.add_widget(Label(text=f"₹{total_amount:.2f}", color=(0, 0, 0, 1)))

# Run the app
if __name__ == '__main__':
    ExpenseManagerApp().run()

